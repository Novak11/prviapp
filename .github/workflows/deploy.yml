cat > .github/workflows/deploy.yml << 'EOF'
name: CI/CD to ECS

on:
  push:
    branches: [ master ]    # change to master since your default branch is named master

env:
  AWS_REGION: eu-central-1
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  ECR_REPO: prviapp
  CLUSTER: my-cluster
  SERVICE: prviapp-svc
  TASK_FAMILY: prviapp-task

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag & push image
      run: |
        docker build -t $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO:latest .
        docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO:latest

    - name: Deploy to ECS
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: |
          family: ${{ env.TASK_FAMILY }}
          networkMode: awsvpc
          requiresCompatibilities: [FARGATE]
          cpu: '256'
          memory: '512'
          executionRoleArn: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/ecsTaskExecutionRole
          containerDefinitions:
            - name: prviapp
              image: ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPO }}:latest
              portMappings:
                - containerPort: 80
        service: ${{ env.SERVICE }}
        cluster: ${{ env.CLUSTER }}
        wait-for-service-stability: true
EOF
